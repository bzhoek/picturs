WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
// WHITESPACE = { ( " "* ~ "\\" ~ NEWLINE ~ " "* ) }
picture = _{ SOI ~ statements* ~ EOI }
statements = _{ comment | container | shape | font_config | unit_config | box_config | circle_config | line_config | continue_from | flow | flow_to | move_to }
comment = @{ ("#" | "//") ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
shape = _{ dot | arrow | line | sline | rectangle | file | circle | ellipse | cylinder | oval | text | path }
flow = { "down" | "right" | "top" | "left" }

continue_from = { continue_prefix? ~ continue_direction  }
continue_prefix = _{ "continue" ~ "from"? }
continue_direction = { "right-top" }

// config
unit_config = { "set unit" ~ unit }
font_config = { "set font" ~ string? ~ size? }
box_config = { "set box" ~ (padding | width| height | radius | space )* }
circle_config = { "set circle" ~ (height) }
line_config = { "set line" ~ length }

// closed shapes
container = { "box" ~ identified? ~ attributes ~ "{" ~ statements* ~ "}" }
rectangle = { "box" ~ identified? ~ attributes }
file = { "file" ~ identified? ~ attributes }
circle = { "circle" ~ identified? ~ attributes }
ellipse = { "ellipse" ~ identified? ~ attributes }
cylinder = { "cylinder" ~ identified? ~ attributes }
oval = { "oval" ~ identified? ~ attributes }

attributes = { attribute* }
attribute = _{ string | stroke | fill | width | height | padding | radius | space | location | endings | text_color | flow | same | thickness | effect }
stroke = { "color" ~ color }
fill = { "fill" ~ id }
width = { ("wd" | "wid" | "width") ~ size_ }
height = { ("ht" | "height") ~ size_ }
padding = { ("pd" | "padding") ~ size_ }
radius = { ("rd" | "rad" | "radius") ~ size_ }
space = { ("sp" | "space" ) ~ size_ }
text_color = { "text" ~ id }

color = _{ ( id | rgb) }
rgb = ${ "#" ~ ASCII_HEX_DIGIT{6} }

// open shapes
arrow = { "arrow" ~ line_attributes }
line = { "line" ~ identified? ~ line_attributes }
sline = { "sline" ~ identified? ~ line_attributes }
path = { "path" ~ identified? ~ movements ~ caption? }

line_attributes = { line_attribute* }
line_attribute = _{ stroke | length | source | rel_movement | target | caption | endings | same | thickness }

length = { ("ln" | "length") ~ size_ }
source = { ("from" | "at") ~ object_fraction }
target = { "to" ~ object_fraction }

object_fraction = _{ fraction? ~ object_edge }
fraction = ${ number ~ "/" ~ number }

endings = ${ left_end? ~ "-" ~ right_end? }
left_end = { "<" | "*" }
right_end = { ">" | "*" }

caption = { string ~ alignment? ~ opaque? }
alignment = { "left" | "right" | "above" | "below" | "nw" | "ne" | "sw" | "se" | "ljust" }
opaque = { "opaque" }

// text
text = { "text" ~ identified? ~ text_attributes }
text_attributes = { text_attribute* }
text_attribute = _{ string | stroke | fill | width | location | fit }
fit = { "fit" }

// common
identified = ${ "." ~ id }
id = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

size = { size_ }
size_ = _{ number ~ unit? }
number = @{ (ASCII_DIGIT+ ~ decimals?) | decimals }
decimals = _{ "." ~ ASCII_DIGIT+ }
unit = { "in" | "cm" | "mm" | "pt" | "pc" | "px" | "u" }

location = { edge? ~ rel_movement+ ~ (last_object | from_object)? }
rel_movement = { offset ~ direction }
offset = { size_ }
direction = { "up" | "down" | "left" | "right" }
last_object = { "last" ~ object_fraction }
from_object = { "from" ~ object_fraction }

same = { "same" }
thickness = { "invisible" | "invis" | "nostroke" | "thin" | "normal" | "thicker" | "thickest" | "thick" }
effect = { "dotted" | "dashed" | "solid" }

flow_to = { "flow" ~ size_ }
move_to = { "move" ~ movements }
movements = { movement* }
movement = _{ rel_movement | abs_movement }
abs_movement = { "to" ~ object_edge }

dot = { "dot" ~ identified? ~ dot_attributes }
dot_attributes = { dot_attribute* }
dot_attribute = _{ source | stroke | radius | same | caption }

object_edge = ${ id ~ edge? }
edge = ${ "." ~ (compass | hours | degrees) }
compass = { "ne" | "nw" | "n" | "e" | "se" | "sw" | "s" | "w" |  "c" }
hours = ${ ASCII_DIGIT{1,2} ~ ":" ~ ASCII_DIGIT{0,2} }
degrees = { ASCII_DIGIT{1,3} }

title = { string? }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}